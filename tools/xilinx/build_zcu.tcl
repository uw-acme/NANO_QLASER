#*****************************************************************************************
# Vivado (TM) v2022.1.2 (64-bit)
#
# build_zcu.tcl: Tcl script for re-creating project 'prj'
#
# Generated by Vivado on Sat Nov 18 17:48:44 -0800 2023
# IP Build 3603185 on Sat Aug  6 04:07:44 MDT 2022
#
# This file contains the Vivado Tcl commands for re-creating the project to the state*
# when this script was generated. In order to re-create the project, please source this
# file in the Vivado Tcl Shell.
#
# * Note that the runs in the created project will be configured the same way as the
#   original project, however they will not be launched automatically. To regenerate the
#   run results please launch the synthesis/implementation runs as needed.
#
#*****************************************************************************************
# NOTE: In order to use this script for source control purposes, please make sure that the
#       following files are added to the source control system:-
#
# 1. This project restoration tcl script (build_zcu.tcl) that was generated.
#
# 2. The following source(s) files that were local or imported into the original project.
#    (Please see the '$orig_proj_dir' and '$origin_dir' variable setting below at the start of the script)
#
#    <none>
#
# 3. The following remote source files that were added to the original project:-
#
#    "E:/github/NANO_QLASER/src/hdl/fpga_zcu102/qlaser_dacs_pulse_channel_pkg.vhd"
#    "E:/github/NANO_QLASER/src/hdl/fpga_zcu102/qlaser_dac_dc_pkg.vhd"
#    "E:/github/NANO_QLASER/src/hdl/fpga_zcu102/qlaser_pkg.vhd"
#    "E:/github/NANO_QLASER/src/hdl/fpga_zcu102/blink.vhd"
#    "E:/github/NANO_QLASER/src/hdl/fpga_zcu102/clkreset_zcu.vhd"
#    "E:/github/NANO_QLASER/src/hdl/fpga_common/nc3_cpu2uart.vhd"
#    "E:/github/NANO_QLASER/src/hdl/fpga_common/nc3_serial_pkg_100MHz.vhd"
#    "E:/github/NANO_QLASER/src/hdl/fpga_common/nc3_uart.vhd"
#    "E:/github/NANO_QLASER/src/hdl/fpga_common/nc3_uart2cpu.vhd"
#    "E:/github/NANO_QLASER/src/hdl/fpga_common/qlaser_cpuint_serial.vhd"
#    "E:/github/NANO_QLASER/src/hdl/fpga_zcu102/qlaser_dac_pulse_pkg.vhd"
#    "E:/github/NANO_QLASER/src/hdl/fpga_zcu102/qlaser_spi.vhd"
#    "E:/github/NANO_QLASER/src/hdl/fpga_zcu102/qlaser_cif.vhd"
#    "E:/github/NANO_QLASER/src/hdl/fpga_zcu102/pulse2pmod.vhd"
#    "E:/github/NANO_QLASER/src/hdl/fpga_zcu102/qlaser_dacs_dc_zcu.vhd"
#    "E:/github/NANO_QLASER/src/hdl/fpga_zcu102/qlaser_pmod_pulse.vhd"
#    "E:/github/NANO_QLASER/src/hdl/fpga_zcu102/qlaser_dacs_pulse_zcu.vhd"
#    "E:/github/NANO_QLASER/src/hdl/fpga_zcu102/qlaser_version_pkg_zcu.vhd"
#    "E:/github/NANO_QLASER/src/hdl/fpga_zcu102/qlaser_misc.vhd"
#    "E:/github/NANO_QLASER/src/hdl/fpga_zcu102/qlaser_top_zcu.vhd"
#    "E:/github/NANO_QLASER/tools/constraint_zcu/fifo_data_to_stream/fifo_data_to_stream.xci"
#    "E:/github/NANO_QLASER/tools/constraint_zcu/bram_waveform/bram_waveform.xci"
#    "E:/github/NANO_QLASER/tools/constraint_zcu/axis_data_fifo_32Kx16b/axis_data_fifo_32Kx16b.xci"
#    "E:/github/NANO_QLASER/tools/constraint_zcu/bram_pulseposition/bram_pulseposition.xci"
#    "E:/github/NANO_QLASER/src/hdl/fpga_zcu102/qlaser_dacs_pulse_channel.vhdl"
#    "E:/github/NANO_QLASER/tools/constraint_zcu/clkpll_zcu/clkpll_zcu.xci"
#    "E:/github/NANO_QLASER/tools/constraint_zcu/pinout_zcu.xdc"
#    "E:/github/NANO_QLASER/tools/constraint_zcu/qlaser_timing_zcu.xdc"
#    "E:/github/NANO_QLASER/tools/constraint_zcu/set_usercode_zcu.xdc"
#    "E:/github/NANO_QLASER/src/hdl/testbench/tb_cpubus_dacs_pulse_channel.vhdl"
#    "E:/github/NANO_QLASER/src/hdl/testbench/tb_qlaser_pkg.vhd"
#    "E:/github/NANO_QLASER/src/hdl/testbench/gj_tb_driver_gpio.vhd"
#    "E:/github/NANO_QLASER/src/hdl/testbench/gj_tb_pkg.vhd"
#    "E:/github/NANO_QLASER/src/hdl/testbench/gj_tb_driver_analog.vhd"
#    "E:/github/NANO_QLASER/src/hdl/testbench/gj_cpu_bfm_pkg.vhd"
#    "E:/github/NANO_QLASER/src/hdl/testbench/gj_serif_uart2cpu.vhd"
#    "E:/github/NANO_QLASER/src/hdl/testbench/qlaser_jesd_tx_tb.vhd"
#    "E:/github/NANO_QLASER/src/hdl/testbench/gj_cpu_e.vhd"
#    "E:/github/NANO_QLASER/src/hdl/testbench/gj_uart_tb.vhd"
#    "E:/github/NANO_QLASER/src/hdl/testbench/gj_serif_cpu2uart.vhd"
#    "E:/github/NANO_QLASER/src/hdl/testbench/gj_cpu_pkg.vhd"
#    "E:/github/NANO_QLASER/src/hdl/testbench/qlaser_dacs_pulse_tb.vhd"
#    "E:/github/NANO_QLASER/src/hdl/testbench/gj_serial_pkg.vhd"
#    "E:/github/NANO_QLASER/src/hdl/testbench/tb_cpubus_dacs_dc.vhd"
#    "E:/github/NANO_QLASER/src/hdl/testbench/gj_tb_driver_serif.vhd"
#    "E:/github/NANO_QLASER/src/hdl/testbench/ps1_wrapper_sim.vhd"
#
#*****************************************************************************************

# Check file required for this script exists
proc checkRequiredFiles { origin_dir} {
  set status true
  set files [list \
 "[file normalize "$origin_dir/../../src/hdl/fpga_zcu102/qlaser_dacs_pulse_channel_pkg.vhd"]"\
 "[file normalize "$origin_dir/../../src/hdl/fpga_zcu102/qlaser_dac_dc_pkg.vhd"]"\
 "[file normalize "$origin_dir/../../src/hdl/fpga_zcu102/qlaser_pkg.vhd"]"\
 "[file normalize "$origin_dir/../../src/hdl/fpga_zcu102/blink.vhd"]"\
 "[file normalize "$origin_dir/../../src/hdl/fpga_zcu102/clkreset_zcu.vhd"]"\
 "[file normalize "$origin_dir/../../src/hdl/fpga_common/nc3_cpu2uart.vhd"]"\
 "[file normalize "$origin_dir/../../src/hdl/fpga_common/nc3_serial_pkg_100MHz.vhd"]"\
 "[file normalize "$origin_dir/../../src/hdl/fpga_common/nc3_uart.vhd"]"\
 "[file normalize "$origin_dir/../../src/hdl/fpga_common/nc3_uart2cpu.vhd"]"\
 "[file normalize "$origin_dir/../../src/hdl/fpga_common/qlaser_cpuint_serial.vhd"]"\
 "[file normalize "$origin_dir/../../src/hdl/fpga_zcu102/qlaser_dac_pulse_pkg.vhd"]"\
 "[file normalize "$origin_dir/../../src/hdl/fpga_zcu102/qlaser_spi.vhd"]"\
 "[file normalize "$origin_dir/../../src/hdl/fpga_zcu102/qlaser_cif.vhd"]"\
 "[file normalize "$origin_dir/../../src/hdl/fpga_zcu102/pulse2pmod.vhd"]"\
 "[file normalize "$origin_dir/../../src/hdl/fpga_zcu102/qlaser_dacs_dc_zcu.vhd"]"\
 "[file normalize "$origin_dir/../../src/hdl/fpga_zcu102/qlaser_pmod_pulse.vhd"]"\
 "[file normalize "$origin_dir/../../src/hdl/fpga_zcu102/qlaser_dacs_pulse_zcu.vhd"]"\
 "[file normalize "$origin_dir/../../src/hdl/fpga_zcu102/qlaser_version_pkg_zcu.vhd"]"\
 "[file normalize "$origin_dir/../../src/hdl/fpga_zcu102/qlaser_misc.vhd"]"\
 "[file normalize "$origin_dir/../../src/hdl/fpga_zcu102/qlaser_top_zcu.vhd"]"\
 "[file normalize "$origin_dir/../constraint_zcu/fifo_data_to_stream/fifo_data_to_stream.xci"]"\
 "[file normalize "$origin_dir/../constraint_zcu/bram_waveform/bram_waveform.xci"]"\
 "[file normalize "$origin_dir/../constraint_zcu/ila_0/ila_0.xci"]"\
 "[file normalize "$origin_dir/../constraint_zcu/ila_pulse/ila_pulse.xci"]"\
 "[file normalize "$origin_dir/../constraint_zcu/bram_pulse_definition/bram_pulse_definition.xci"]"\
 "[file normalize "$origin_dir/../constraint_zcu/axis_data_fifo_32Kx16b/axis_data_fifo_32Kx16b.xci"]"\
 "[file normalize "$origin_dir/../constraint_zcu/bram_pulseposition/bram_pulseposition.xci"]"\
 "[file normalize "$origin_dir/../../src/hdl/fpga_zcu102/qlaser_dacs_pulse_channel.vhdl"]"\
 "[file normalize "$origin_dir/../constraint_zcu/clkpll_zcu/clkpll_zcu.xci"]"\
 "[file normalize "$origin_dir/../constraint_zcu/pinout_zcu.xdc"]"\
 "[file normalize "$origin_dir/../constraint_zcu/qlaser_timing_zcu.xdc"]"\
 "[file normalize "$origin_dir/../constraint_zcu/set_usercode_zcu.xdc"]"\
 "[file normalize "$origin_dir/../../src/hdl/testbench/tb_cpubus_dacs_pulse_channel.vhdl"]"\
 "[file normalize "$origin_dir/../../src/hdl/testbench/tb_qlaser_pkg.vhd"]"\
 "[file normalize "$origin_dir/../../src/hdl/testbench/gj_tb_driver_gpio.vhd"]"\
 "[file normalize "$origin_dir/../../src/hdl/testbench/gj_tb_pkg.vhd"]"\
 "[file normalize "$origin_dir/../../src/hdl/testbench/gj_tb_driver_analog.vhd"]"\
 "[file normalize "$origin_dir/../../src/hdl/testbench/gj_cpu_bfm_pkg.vhd"]"\
 "[file normalize "$origin_dir/../../src/hdl/testbench/gj_serif_uart2cpu.vhd"]"\
 "[file normalize "$origin_dir/../../src/hdl/testbench/qlaser_jesd_tx_tb.vhd"]"\
 "[file normalize "$origin_dir/../../src/hdl/testbench/gj_cpu_e.vhd"]"\
 "[file normalize "$origin_dir/../../src/hdl/testbench/gj_uart_tb.vhd"]"\
 "[file normalize "$origin_dir/../../src/hdl/testbench/gj_serif_cpu2uart.vhd"]"\
 "[file normalize "$origin_dir/../../src/hdl/testbench/gj_cpu_pkg.vhd"]"\
 "[file normalize "$origin_dir/../../src/hdl/testbench/qlaser_dacs_pulse_tb.vhd"]"\
 "[file normalize "$origin_dir/../../src/hdl/testbench/gj_serial_pkg.vhd"]"\
 "[file normalize "$origin_dir/../../src/hdl/testbench/tb_cpubus_dacs_dc.vhd"]"\
 "[file normalize "$origin_dir/../../src/hdl/testbench/gj_tb_driver_serif.vhd"]"\
 "[file normalize "$origin_dir/../../src/hdl/testbench/ps1_wrapper_sim.vhd"]"\
  ]
  foreach ifile $files {
    if { ![file isfile $ifile] } {
      puts " Could not find remote file $ifile "
      set status false
    }
  }

  return $status
}
# Set the reference directory for source file relative paths (by default the value is script directory path)
set origin_dir "."

# Use origin directory path location variable, if specified in the tcl shell
if { [info exists ::origin_dir_loc] } {
  set origin_dir $::origin_dir_loc
}

# Set the project name
set _xil_proj_name_ "prj"

# Use project name variable, if specified in the tcl shell
if { [info exists ::user_project_name] } {
  set _xil_proj_name_ $::user_project_name
}

variable script_file
set script_file "build_zcu.tcl"

# Help information for this script
proc print_help {} {
  variable script_file
  puts "\nDescription:"
  puts "Recreate a Vivado project from this script. The created project will be"
  puts "functionally equivalent to the original project for which this script was"
  puts "generated. The script contains commands for creating a project, filesets,"
  puts "runs, adding/importing sources and setting properties on various objects.\n"
  puts "Syntax:"
  puts "$script_file"
  puts "$script_file -tclargs \[--origin_dir <path>\]"
  puts "$script_file -tclargs \[--project_name <name>\]"
  puts "$script_file -tclargs \[--help\]\n"
  puts "Usage:"
  puts "Name                   Description"
  puts "-------------------------------------------------------------------------"
  puts "\[--origin_dir <path>\]  Determine source file paths wrt this path. Default"
  puts "                       origin_dir path value is \".\", otherwise, the value"
  puts "                       that was set with the \"-paths_relative_to\" switch"
  puts "                       when this script was generated.\n"
  puts "\[--project_name <name>\] Create project with the specified name. Default"
  puts "                       name is the name of the project from where this"
  puts "                       script was generated.\n"
  puts "\[--help\]               Print help information for this script"
  puts "-------------------------------------------------------------------------\n"
  exit 0
}

if { $::argc > 0 } {
  for {set i 0} {$i < $::argc} {incr i} {
    set option [string trim [lindex $::argv $i]]
    switch -regexp -- $option {
      "--origin_dir"   { incr i; set origin_dir [lindex $::argv $i] }
      "--project_name" { incr i; set _xil_proj_name_ [lindex $::argv $i] }
      "--help"         { print_help }
      default {
        if { [regexp {^-} $option] } {
          puts "ERROR: Unknown option '$option' specified, please type '$script_file -tclargs --help' for usage info.\n"
          return 1
        }
      }
    }
  }
}

# Set the directory path for the original project from where this script was exported
set orig_proj_dir "[file normalize "$origin_dir/../../prj"]"

# Check for paths and files needed for project creation
set validate_required 0
if { $validate_required } {
  if { [checkRequiredFiles $origin_dir] } {
    puts "Tcl file $script_file is valid. All files required for project creation is accesable. "
  } else {
    puts "Tcl file $script_file is not valid. Not all files required for project creation is accesable. "
    return
  }
}

# Create project
create_project ${_xil_proj_name_} ../../${_xil_proj_name_} -part xczu9eg-ffvb1156-2-e

# Set the directory path for the new project
set proj_dir [get_property directory [current_project]]

# Set project properties
set obj [current_project]
set_property -name "board_part" -value "xilinx.com:zcu102:part0:3.4" -objects $obj
set_property -name "default_lib" -value "xil_defaultlib" -objects $obj
set_property -name "enable_resource_estimation" -value "0" -objects $obj
set_property -name "enable_vhdl_2008" -value "1" -objects $obj
set_property -name "ip_cache_permissions" -value "read write" -objects $obj
set_property -name "ip_output_repo" -value "$proj_dir/${_xil_proj_name_}.cache/ip" -objects $obj
set_property -name "mem.enable_memory_map_generation" -value "1" -objects $obj
set_property -name "platform.board_id" -value "zcu102" -objects $obj
set_property -name "revised_directory_structure" -value "1" -objects $obj
set_property -name "sim.central_dir" -value "$proj_dir/${_xil_proj_name_}.ip_user_files" -objects $obj
set_property -name "sim.ip.auto_export_scripts" -value "1" -objects $obj
set_property -name "simulator_language" -value "VHDL" -objects $obj
set_property -name "target_language" -value "VHDL" -objects $obj
set_property -name "webtalk.activehdl_export_sim" -value "1" -objects $obj
set_property -name "webtalk.modelsim_export_sim" -value "1" -objects $obj
set_property -name "webtalk.questa_export_sim" -value "1" -objects $obj
set_property -name "webtalk.riviera_export_sim" -value "1" -objects $obj
set_property -name "webtalk.vcs_export_sim" -value "1" -objects $obj
set_property -name "webtalk.xcelium_export_sim" -value "1" -objects $obj
set_property -name "webtalk.xsim_export_sim" -value "1" -objects $obj
set_property -name "xpm_libraries" -value "XPM_CDC" -objects $obj

# Create 'sources_1' fileset (if not found)
if {[string equal [get_filesets -quiet sources_1] ""]} {
  create_fileset -srcset sources_1
}

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
[file normalize "${origin_dir}/../../src/hdl/fpga_zcu102/qlaser_dacs_pulse_channel_pkg.vhd"] \
 [file normalize "${origin_dir}/../../src/hdl/fpga_zcu102/qlaser_dac_dc_pkg.vhd"] \
 [file normalize "${origin_dir}/../../src/hdl/fpga_zcu102/qlaser_pkg.vhd"] \
 [file normalize "${origin_dir}/../../src/hdl/fpga_zcu102/blink.vhd"] \
 [file normalize "${origin_dir}/../../src/hdl/fpga_zcu102/clkreset_zcu.vhd"] \
 [file normalize "${origin_dir}/../../src/hdl/fpga_common/nc3_cpu2uart.vhd"] \
 [file normalize "${origin_dir}/../../src/hdl/fpga_common/nc3_serial_pkg_100MHz.vhd"] \
 [file normalize "${origin_dir}/../../src/hdl/fpga_common/nc3_uart.vhd"] \
 [file normalize "${origin_dir}/../../src/hdl/fpga_common/nc3_uart2cpu.vhd"] \
 [file normalize "${origin_dir}/../../src/hdl/fpga_common/qlaser_cpuint_serial.vhd"] \
 [file normalize "${origin_dir}/../../src/hdl/fpga_zcu102/qlaser_dac_pulse_pkg.vhd"] \
 [file normalize "${origin_dir}/../../src/hdl/fpga_zcu102/qlaser_spi.vhd"] \
 [file normalize "${origin_dir}/../../src/hdl/fpga_zcu102/qlaser_cif.vhd"] \
 [file normalize "${origin_dir}/../../src/hdl/fpga_zcu102/pulse2pmod.vhd"] \
 [file normalize "${origin_dir}/../../src/hdl/fpga_zcu102/qlaser_dacs_dc_zcu.vhd"] \
 [file normalize "${origin_dir}/../../src/hdl/fpga_zcu102/qlaser_pmod_pulse.vhd"] \
 [file normalize "${origin_dir}/../../src/hdl/fpga_zcu102/qlaser_dacs_pulse_zcu.vhd"] \
 [file normalize "${origin_dir}/../../src/hdl/fpga_zcu102/qlaser_version_pkg_zcu.vhd"] \
 [file normalize "${origin_dir}/../../src/hdl/fpga_zcu102/qlaser_misc.vhd"] \
 [file normalize "${origin_dir}/../../src/hdl/fpga_zcu102/qlaser_top_zcu.vhd"] \
 [file normalize "${origin_dir}/../constraint_zcu/fifo_data_to_stream/fifo_data_to_stream.xci"] \
 [file normalize "${origin_dir}/../constraint_zcu/bram_waveform/bram_waveform.xci"] \
 [file normalize "${origin_dir}/../constraint_zcu/ila_0/ila_0.xci"] \
 [file normalize "${origin_dir}/../constraint_zcu/ila_pulse/ila_pulse.xci"] \
 [file normalize "${origin_dir}/../constraint_zcu/bram_pulse_definition/bram_pulse_definition.xci"] \
 [file normalize "${origin_dir}/../constraint_zcu/axis_data_fifo_32Kx16b/axis_data_fifo_32Kx16b.xci"] \
 [file normalize "${origin_dir}/../constraint_zcu/bram_pulseposition/bram_pulseposition.xci"] \
 [file normalize "${origin_dir}/../../src/hdl/fpga_zcu102/qlaser_dacs_pulse_channel.vhdl"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for remote files
set file "$origin_dir/../../src/hdl/fpga_zcu102/qlaser_dacs_pulse_channel_pkg.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/../../src/hdl/fpga_zcu102/qlaser_dac_dc_pkg.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/../../src/hdl/fpga_zcu102/qlaser_pkg.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/../../src/hdl/fpga_zcu102/blink.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/../../src/hdl/fpga_zcu102/clkreset_zcu.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/../../src/hdl/fpga_common/nc3_cpu2uart.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/../../src/hdl/fpga_common/nc3_serial_pkg_100MHz.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/../../src/hdl/fpga_common/nc3_uart.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/../../src/hdl/fpga_common/nc3_uart2cpu.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/../../src/hdl/fpga_common/qlaser_cpuint_serial.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/../../src/hdl/fpga_zcu102/qlaser_dac_pulse_pkg.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/../../src/hdl/fpga_zcu102/qlaser_spi.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/../../src/hdl/fpga_zcu102/qlaser_cif.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/../../src/hdl/fpga_zcu102/pulse2pmod.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/../../src/hdl/fpga_zcu102/qlaser_dacs_dc_zcu.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/../../src/hdl/fpga_zcu102/qlaser_pmod_pulse.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/../../src/hdl/fpga_zcu102/qlaser_dacs_pulse_zcu.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/../../src/hdl/fpga_zcu102/qlaser_version_pkg_zcu.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/../../src/hdl/fpga_zcu102/qlaser_misc.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/../../src/hdl/fpga_zcu102/qlaser_top_zcu.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/../constraint_zcu/fifo_data_to_stream/fifo_data_to_stream.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}

set file "$origin_dir/../constraint_zcu/bram_waveform/bram_waveform.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}

set file "$origin_dir/../constraint_zcu/bram_pulse_definition/bram_pulse_definition.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}

set file "$origin_dir/../constraint_zcu/axis_data_fifo_32Kx16b/axis_data_fifo_32Kx16b.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}

set file "$origin_dir/../constraint_zcu/ila_0/ila_0.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}

set file "$origin_dir/../constraint_zcu/ila_pulse/ila_pulse.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}

set file "$origin_dir/../constraint_zcu/bram_pulseposition/bram_pulseposition.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}

set file "$origin_dir/../../src/hdl/fpga_zcu102/qlaser_dacs_pulse_channel.vhdl"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj


# Set 'sources_1' fileset file properties for local files
# None

# Set 'sources_1' fileset properties
set obj [get_filesets sources_1]
set_property -name "top" -value "qlaser_top" -objects $obj

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/../constraint_zcu/clkpll_zcu/clkpll_zcu.xci"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for remote files
set file "$origin_dir/../constraint_zcu/clkpll_zcu/clkpll_zcu.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}


# Set 'sources_1' fileset file properties for local files
# None

# Create 'constrs_1' fileset (if not found)
if {[string equal [get_filesets -quiet constrs_1] ""]} {
  create_fileset -constrset constrs_1
}

# Set 'constrs_1' fileset object
set obj [get_filesets constrs_1]

# Add/Import constrs file and set constrs file properties
set file "[file normalize "$origin_dir/../constraint_zcu/pinout_zcu.xdc"]"
set file_added [add_files -norecurse -fileset $obj [list $file]]
set file "$origin_dir/../constraint_zcu/pinout_zcu.xdc"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets constrs_1] [list "*$file"]]
set_property -name "file_type" -value "XDC" -objects $file_obj

# Add/Import constrs file and set constrs file properties
set file "[file normalize "$origin_dir/../constraint_zcu/qlaser_timing_zcu.xdc"]"
set file_added [add_files -norecurse -fileset $obj [list $file]]
set file "$origin_dir/../constraint_zcu/qlaser_timing_zcu.xdc"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets constrs_1] [list "*$file"]]
set_property -name "file_type" -value "XDC" -objects $file_obj

# Add/Import constrs file and set constrs file properties
set file "[file normalize "$origin_dir/../constraint_zcu/set_usercode_zcu.xdc"]"
set file_added [add_files -norecurse -fileset $obj [list $file]]
set file "$origin_dir/../constraint_zcu/set_usercode_zcu.xdc"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets constrs_1] [list "*$file"]]
set_property -name "file_type" -value "XDC" -objects $file_obj

# Set 'constrs_1' fileset properties
set obj [get_filesets constrs_1]

# Create 'sim_1' fileset (if not found)
if {[string equal [get_filesets -quiet sim_1] ""]} {
  create_fileset -simset sim_1
}

# Set 'sim_1' fileset object
set obj [get_filesets sim_1]
set files [list \
 [file normalize "${origin_dir}/../../src/hdl/testbench/tb_cpubus_dacs_pulse_channel.vhdl"] \
 [file normalize "${origin_dir}/../../src/hdl/testbench/tb_qlaser_pkg.vhd"] \
 [file normalize "${origin_dir}/../../src/hdl/testbench/gj_tb_driver_gpio.vhd"] \
 [file normalize "${origin_dir}/../../src/hdl/testbench/gj_tb_pkg.vhd"] \
 [file normalize "${origin_dir}/../../src/hdl/testbench/gj_tb_driver_analog.vhd"] \
 [file normalize "${origin_dir}/../../src/hdl/testbench/gj_cpu_bfm_pkg.vhd"] \
 [file normalize "${origin_dir}/../../src/hdl/testbench/gj_serif_uart2cpu.vhd"] \
 [file normalize "${origin_dir}/../../src/hdl/testbench/qlaser_jesd_tx_tb.vhd"] \
 [file normalize "${origin_dir}/../../src/hdl/testbench/gj_cpu_e.vhd"] \
 [file normalize "${origin_dir}/../../src/hdl/testbench/gj_uart_tb.vhd"] \
 [file normalize "${origin_dir}/../../src/hdl/testbench/gj_serif_cpu2uart.vhd"] \
 [file normalize "${origin_dir}/../../src/hdl/testbench/gj_cpu_pkg.vhd"] \
 [file normalize "${origin_dir}/../../src/hdl/testbench/qlaser_dacs_pulse_tb.vhd"] \
 [file normalize "${origin_dir}/../../src/hdl/testbench/gj_serial_pkg.vhd"] \
 [file normalize "${origin_dir}/../../src/hdl/testbench/tb_cpubus_dacs_dc.vhd"] \
 [file normalize "${origin_dir}/../../src/hdl/testbench/gj_tb_driver_serif.vhd"] \
 [file normalize "${origin_dir}/../../src/hdl/testbench/ps1_wrapper_sim.vhd"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sim_1' fileset file properties for remote files
set file "$origin_dir/../../src/hdl/testbench/tb_cpubus_dacs_pulse_channel.vhdl"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/../../src/hdl/testbench/tb_qlaser_pkg.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/../../src/hdl/testbench/gj_tb_driver_gpio.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/../../src/hdl/testbench/gj_tb_pkg.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/../../src/hdl/testbench/gj_tb_driver_analog.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/../../src/hdl/testbench/gj_cpu_bfm_pkg.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/../../src/hdl/testbench/gj_serif_uart2cpu.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/../../src/hdl/testbench/qlaser_jesd_tx_tb.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/../../src/hdl/testbench/gj_cpu_e.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/../../src/hdl/testbench/gj_uart_tb.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/../../src/hdl/testbench/gj_serif_cpu2uart.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/../../src/hdl/testbench/gj_cpu_pkg.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/../../src/hdl/testbench/qlaser_dacs_pulse_tb.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/../../src/hdl/testbench/gj_serial_pkg.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/../../src/hdl/testbench/tb_cpubus_dacs_dc.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/../../src/hdl/testbench/gj_tb_driver_serif.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/../../src/hdl/testbench/ps1_wrapper_sim.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

# set IP repo
set_property  ip_repo_paths  "$origin_dir/../../tools/ip_repo/axi_cpubus" [current_project]
update_ip_catalog -rebuild

source "$origin_dir/../../tools/xilinx/ps1_zcu.tcl"
regenerate_bd_layout
make_wrapper -files [get_files "$proj_dir/${_xil_proj_name_}.srcs/sources_1/bd/ps1/ps1.bd"] -top
add_files -norecurse "$proj_dir/${_xil_proj_name_}.gen/sources_1/bd/ps1/hdl/ps1_wrapper.vhd"

# Set 'sim_1' fileset file properties for local files
# None

# Set 'sim_1' fileset properties
set obj [get_filesets sim_1]
set_property -name "top" -value "tb_cpubus_dacs_pulse_channel" -objects $obj
set_property -name "top_auto_set" -value "0" -objects $obj
set_property -name "top_lib" -value "xil_defaultlib" -objects $obj

# Set 'utils_1' fileset object
set obj [get_filesets utils_1]
# Empty (no sources present)

# Set 'utils_1' fileset properties
set obj [get_filesets utils_1]

set idrFlowPropertiesConstraints ""
catch {
 set idrFlowPropertiesConstraints [get_param runs.disableIDRFlowPropertyConstraints]
 set_param runs.disableIDRFlowPropertyConstraints 1
}

# Create 'synth_1' run (if not found)
if {[string equal [get_runs -quiet synth_1] ""]} {
    create_run -name synth_1 -part xczu9eg-ffvb1156-2-e -flow {Vivado Synthesis 2022} -strategy "Vivado Synthesis Defaults" -report_strategy {No Reports} -constrset constrs_1
} else {
  set_property strategy "Vivado Synthesis Defaults" [get_runs synth_1]
  set_property flow "Vivado Synthesis 2022" [get_runs synth_1]
}
set obj [get_runs synth_1]
set_property set_report_strategy_name 1 $obj
set_property report_strategy {Vivado Synthesis Default Reports} $obj
set_property set_report_strategy_name 0 $obj
# Create 'synth_1_synth_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs synth_1] synth_1_synth_report_utilization_0] "" ] } {
  create_report_config -report_name synth_1_synth_report_utilization_0 -report_type report_utilization:1.0 -steps synth_design -runs synth_1
}
set obj [get_report_configs -of_objects [get_runs synth_1] synth_1_synth_report_utilization_0]
if { $obj != "" } {

}
set obj [get_runs synth_1]
set_property -name "auto_incremental_checkpoint" -value "1" -objects $obj
set_property -name "strategy" -value "Vivado Synthesis Defaults" -objects $obj

# set the current synth run
current_run -synthesis [get_runs synth_1]

# Create 'impl_1' run (if not found)
if {[string equal [get_runs -quiet impl_1] ""]} {
    create_run -name impl_1 -part xczu9eg-ffvb1156-2-e -flow {Vivado Implementation 2022} -strategy "Vivado Implementation Defaults" -report_strategy {No Reports} -constrset constrs_1 -parent_run synth_1
} else {
  set_property strategy "Vivado Implementation Defaults" [get_runs impl_1]
  set_property flow "Vivado Implementation 2022" [get_runs impl_1]
}
set obj [get_runs impl_1]
set_property set_report_strategy_name 1 $obj
set_property report_strategy {Vivado Implementation Default Reports} $obj
set_property set_report_strategy_name 0 $obj
# Create 'impl_1_init_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_init_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_init_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps init_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_init_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj

}
# Create 'impl_1_opt_report_drc_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_drc_0] "" ] } {
  create_report_config -report_name impl_1_opt_report_drc_0 -report_type report_drc:1.0 -steps opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_drc_0]
if { $obj != "" } {

}
# Create 'impl_1_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj

}
# Create 'impl_1_power_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_power_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_power_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps power_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_power_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj

}
# Create 'impl_1_place_report_io_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_io_0] "" ] } {
  create_report_config -report_name impl_1_place_report_io_0 -report_type report_io:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_io_0]
if { $obj != "" } {

}
# Create 'impl_1_place_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_utilization_0] "" ] } {
  create_report_config -report_name impl_1_place_report_utilization_0 -report_type report_utilization:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_utilization_0]
if { $obj != "" } {

}
# Create 'impl_1_place_report_control_sets_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_control_sets_0] "" ] } {
  create_report_config -report_name impl_1_place_report_control_sets_0 -report_type report_control_sets:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_control_sets_0]
if { $obj != "" } {
set_property -name "options.verbose" -value "1" -objects $obj

}
# Create 'impl_1_place_report_incremental_reuse_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_0] "" ] } {
  create_report_config -report_name impl_1_place_report_incremental_reuse_0 -report_type report_incremental_reuse:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_1_place_report_incremental_reuse_1' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_1] "" ] } {
  create_report_config -report_name impl_1_place_report_incremental_reuse_1 -report_type report_incremental_reuse:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_1]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_1_place_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_place_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj

}
# Create 'impl_1_post_place_power_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_place_power_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_post_place_power_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps post_place_power_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_place_power_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj

}
# Create 'impl_1_phys_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_phys_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_phys_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_phys_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj

}
# Create 'impl_1_route_report_drc_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_drc_0] "" ] } {
  create_report_config -report_name impl_1_route_report_drc_0 -report_type report_drc:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_drc_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_methodology_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_methodology_0] "" ] } {
  create_report_config -report_name impl_1_route_report_methodology_0 -report_type report_methodology:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_methodology_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_power_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_power_0] "" ] } {
  create_report_config -report_name impl_1_route_report_power_0 -report_type report_power:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_power_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_route_status_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_route_status_0] "" ] } {
  create_report_config -report_name impl_1_route_report_route_status_0 -report_type report_route_status:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_route_status_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_route_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_timing_summary_0]
if { $obj != "" } {
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj

}
# Create 'impl_1_route_report_incremental_reuse_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_incremental_reuse_0] "" ] } {
  create_report_config -report_name impl_1_route_report_incremental_reuse_0 -report_type report_incremental_reuse:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_incremental_reuse_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_clock_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_clock_utilization_0] "" ] } {
  create_report_config -report_name impl_1_route_report_clock_utilization_0 -report_type report_clock_utilization:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_clock_utilization_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_bus_skew_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_bus_skew_0] "" ] } {
  create_report_config -report_name impl_1_route_report_bus_skew_0 -report_type report_bus_skew:1.1 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_bus_skew_0]
if { $obj != "" } {
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
# Create 'impl_1_post_route_phys_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_post_route_phys_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps post_route_phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
# Create 'impl_1_post_route_phys_opt_report_bus_skew_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_bus_skew_0] "" ] } {
  create_report_config -report_name impl_1_post_route_phys_opt_report_bus_skew_0 -report_type report_bus_skew:1.1 -steps post_route_phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_bus_skew_0]
if { $obj != "" } {
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
set obj [get_runs impl_1]
set_property -name "strategy" -value "Vivado Implementation Defaults" -objects $obj
set_property -name "steps.write_bitstream.args.readback_file" -value "0" -objects $obj
set_property -name "steps.write_bitstream.args.verbose" -value "0" -objects $obj

# set the current impl run
current_run -implementation [get_runs impl_1]
catch {
 if { $idrFlowPropertiesConstraints != {} } {
   set_param runs.disableIDRFlowPropertyConstraints $idrFlowPropertiesConstraints
 }
}

puts "INFO: Project created:${_xil_proj_name_}"
# Create 'drc_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "drc_1" ] ] ""]} {
create_dashboard_gadget -name {drc_1} -type drc
}
set obj [get_dashboard_gadgets [ list "drc_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_drc_0" -objects $obj

# Create 'methodology_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "methodology_1" ] ] ""]} {
create_dashboard_gadget -name {methodology_1} -type methodology
}
set obj [get_dashboard_gadgets [ list "methodology_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_methodology_0" -objects $obj

# Create 'power_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "power_1" ] ] ""]} {
create_dashboard_gadget -name {power_1} -type power
}
set obj [get_dashboard_gadgets [ list "power_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_power_0" -objects $obj

# Create 'timing_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "timing_1" ] ] ""]} {
create_dashboard_gadget -name {timing_1} -type timing
}
set obj [get_dashboard_gadgets [ list "timing_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_timing_summary_0" -objects $obj

# Create 'utilization_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "utilization_1" ] ] ""]} {
create_dashboard_gadget -name {utilization_1} -type utilization
}
set obj [get_dashboard_gadgets [ list "utilization_1" ] ]
set_property -name "reports" -value "synth_1#synth_1_synth_report_utilization_0" -objects $obj
set_property -name "run.step" -value "synth_design" -objects $obj
set_property -name "run.type" -value "synthesis" -objects $obj

# Create 'utilization_2' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "utilization_2" ] ] ""]} {
create_dashboard_gadget -name {utilization_2} -type utilization
}
set obj [get_dashboard_gadgets [ list "utilization_2" ] ]
set_property -name "reports" -value "impl_1#impl_1_place_report_utilization_0" -objects $obj

move_dashboard_gadget -name {utilization_1} -row 0 -col 0
move_dashboard_gadget -name {power_1} -row 1 -col 0
move_dashboard_gadget -name {drc_1} -row 2 -col 0
move_dashboard_gadget -name {timing_1} -row 0 -col 1
move_dashboard_gadget -name {utilization_2} -row 1 -col 1
move_dashboard_gadget -name {methodology_1} -row 2 -col 1

puts "Attempt to build the project"

# Launch runs, exit on failure
launch_runs impl_1 -to_step write_bitstream -jobs 16
wait_on_run impl_1
write_hw_platform -fixed -include_bit -force -file $orig_proj_dir/qlaser_top.xsa

exi
